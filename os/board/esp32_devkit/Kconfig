#
# For a description of the syntax of this configuration file,
# see kconfig-language at https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt
#

config ESP32_DEVKIT_TYPE
	string 
	default "esp32_DevKitC"  if ARCH_BOARD_ESP32_DEVKITC
	default "esp_wrover_kit" if ARCH_BOARD_ESP_WROVER_KIT

choice
	prompt "On-board Crystal Frequency"
	default ESP32CORE_XTAL_40MHZ

config ESP32CORE_XTAL_40MHZ
	bool "40MHz"

config ESP32CORE_XTAL_26MHZ
	bool "26MHz"

endchoice # On-board Crystal Frequency

config ESP32CORE_RUN_IRAM
	bool "Run from IRAM"
	default n
	---help---
		The default configuration is set up run from IRAM.  However, the
		current (2016-11-14) OpenOCD for ESP32 does not support writing to
		FLASH.  This option sets up the linker scripts to support execution
		from IRAM.  In this case, OpenOCD can be used to load directly into
		IRAM.

		At this stage the nuttx image is small enough to be entirely memory-
		resident.  Once board support is more mature you can add flash cache
		mapping code to run from SPI flash after initial boot. There are at
		least two possible approaches you could take: You can add the flash
		cache mapping code into nuttx directly, so it is self-contained -
		early nuttx initialisation runs from IRAM and enables flash cache,
		and then off you go. Or you can use the esp-idf software bootloader
		and partition table scheme and have nuttx be an esp-idf "app" which
		allows interoperability with the esp-idf system but makes you
		reliant on the esp-idf design for these parts. Both are possible.

choice
	prompt "Default serial port"
	default DEV_TTY_USB0 if ARCH_BOARD_ESP32_DEVKITC
	default DEV_TTY_USB1 if ARCH_BOARD_ESP_WROVER_KIT

config DEV_TTY_USB0
	bool "/dev/ttyUSB0"

config DEV_TTY_USB1
	bool "/dev/ttyUSB1"

endchoice #Default serial port

config ESPTOOLPY_PORT
	string
	default "/dev/ttyUSB0" if DEV_TTY_USB0
	default "/dev/ttyUSB1" if DEV_TTY_USB1
	---help---
	The serial port that's connected to the ESP chip.

choice
	prompt "Default baud rate"
	default ESPTOOLPY_BAUD_115200B
	---help---
		Default baud rate to use while communicating with the ESP chip.

config ESPTOOLPY_BAUD_115200B
	bool "115200 baud"
config ESPTOOLPY_BAUD_230400B
	bool "230400 baud"
config ESPTOOLPY_BAUD_921600B
	bool "921600 baud"
config ESPTOOLPY_BAUD_2MB
	bool "2Mbaud"
endchoice

config ESPTOOLPY_BAUD
	int
	default 115200 if ESPTOOLPY_BAUD_115200B
	default 230400 if ESPTOOLPY_BAUD_230400B
	default 921600 if ESPTOOLPY_BAUD_921600B
	default 2000000 if ESPTOOLPY_BAUD_2MB

config ESPTOOLPY_COMPRESSED
	bool "Use compressed upload"
	default "y"
	---help---
		The flasher tool can send data compressed using zlib, letting the ROM on the ESP chip
		decompress it on the fly before flashing it. For most payloads, this should result in a
		speed increase.

choice
	prompt "Flash SPI mode"
	default FLASHMODE_DIO
	---help---
		Mode the flash chip is flashed in, as well as the default mode for the
		binary to run in.

config FLASHMODE_QIO
	bool "QIO"
config FLASHMODE_QOUT
	bool "QOUT"
config FLASHMODE_DIO
	bool "DIO"
config FLASHMODE_DOUT
	bool "DOUT"
endchoice

# Note: we use esptool.py to flash bootloader in
# dio mode for QIO/QOUT, bootloader then upgrades
# itself to quad mode during initialisation
config ESPTOOLPY_FLASHMODE
	string
	default "dio" if FLASHMODE_QIO
	default "dio" if FLASHMODE_QOUT
	default "dio" if FLASHMODE_DIO
	default "dout" if FLASHMODE_DOUT

choice
	prompt "Flash SPI speed"
	default ESPTOOLPY_FLASHFREQ_40M
	---help---
		The SPI flash frequency to be used.

config ESPTOOLPY_FLASHFREQ_80M
	bool "80 MHz"
config ESPTOOLPY_FLASHFREQ_40M
	bool "40 MHz"
config ESPTOOLPY_FLASHFREQ_26M
	bool "26 MHz"
config ESPTOOLPY_FLASHFREQ_20M
	bool "20 MHz"
endchoice

config ESPTOOLPY_FLASHFREQ
	string
	default "80m" if ESPTOOLPY_FLASHFREQ_80M
	default "40m" if ESPTOOLPY_FLASHFREQ_40M
	default "26m" if ESPTOOLPY_FLASHFREQ_26M
	default "20m" if ESPTOOLPY_FLASHFREQ_20M

choice
	prompt "Flash size"
	default ESPTOOLPY_FLASHSIZE_2MB
	help
		SPI flash size, in megabytes

config ESPTOOLPY_FLASHSIZE_1MB
	bool "1 MB"
config ESPTOOLPY_FLASHSIZE_2MB
	bool "2 MB"
config ESPTOOLPY_FLASHSIZE_4MB
	bool "4 MB"
config ESPTOOLPY_FLASHSIZE_8MB
	bool "8 MB"
config ESPTOOLPY_FLASHSIZE_16MB
	bool "16 MB"
endchoice

config ESPTOOLPY_FLASHSIZE
	string
	default "1MB" if ESPTOOLPY_FLASHSIZE_1MB
	default "2MB" if ESPTOOLPY_FLASHSIZE_2MB
	default "4MB" if ESPTOOLPY_FLASHSIZE_4MB
	default "8MB" if ESPTOOLPY_FLASHSIZE_8MB
	default "16MB" if ESPTOOLPY_FLASHSIZE_16MB

config ESPTOOLPY_FLASHSIZE_DETECT
	bool "Detect flash size when flashing bootloader"
	default y
	---help---
		If this option is set, 'make flash' targets will automatically detect
		the flash size and update the bootloader image when flashing.

choice
	prompt "Before flashing"
	default ESPTOOLPY_BEFORE_RESET
	---help---
		Configure whether esptool.py should reset the ESP32 before flashing.

		Automatic resetting depends on the RTS & DTR signals being
		wired from the serial port to the ESP32. Most USB development
		boards do this internally.

config ESPTOOLPY_BEFORE_RESET
	bool "Reset to bootloader"
config ESPTOOLPY_BEFORE_NORESET
	bool "No reset"
endchoice

config ESPTOOLPY_BEFORE
	string
	default "default_reset" if ESPTOOLPY_BEFORE_RESET
	default "no_reset" if ESPTOOLPY_BEFORE_NORESET

choice
	prompt "After flashing"
	default ESPTOOLPY_AFTER_RESET
	---help---
		Configure whether esptool.py should reset the ESP32 after flashing.

		Automatic resetting depends on the RTS & DTR signals being
		wired from the serial port to the ESP32. Most USB development
		boards do this internally.

config ESPTOOLPY_AFTER_RESET
	bool "Reset after flashing"
config ESPTOOLPY_AFTER_NORESET
	bool "Stay in bootloader"
endchoice

config ESPTOOLPY_AFTER
	string
	default "hard_reset" if ESPTOOLPY_AFTER_RESET
	default "no_reset" if ESPTOOLPY_AFTER_NORESET

config ESP32_AUTOMOUNT_USERFS_DEVNAME
    string "Device name of the partition for user r/w file system"
    default "/dev/smart0p0"
    ---help---
        Specifies the device name (/dev/smart0pX) of the partition
        for user r/w file system.
        when SMARTFS_MULTI_ROOT_DIRS is enabled the device name
        will be appended by "d1" (/dev/smart0pxd1).

config ESP32_AUTOMOUNT_USERFS_MOUNTPOINT
    string "Mountpoint of the partition for user r/w file system"
    default "/mnt"
    ---help---
        Specifies the mount point where user r/w file system
        will be mounted at.
